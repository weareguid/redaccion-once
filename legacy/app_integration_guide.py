# Gu√≠a de Integraci√≥n Inmediata - Mejoras Once Noticias
# Este archivo muestra los cambios exactos para app.py

"""
PASO 1: Importar los nuevos sistemas
Agregar al inicio de app.py:
"""

# Nuevas importaciones
from enhanced_prompt_system import OnceNoticiasPromptSystem
from quality_assurance_system import OnceNoticiasQualityAssurance
from research_system import OnceNoticiasResearchSystem

"""
PASO 2: Inicializar sistemas mejorados
Reemplazar la inicializaci√≥n b√°sica con:
"""

# Sistemas mejorados Once Noticias
@st.cache_resource
def initialize_once_noticias_systems():
    """Inicializa los sistemas optimizados para Once Noticias"""
    client = OpenAI(api_key=st.secrets["OPENAI_API_KEY"])

    # Sistema de prompts espec√≠fico Once Noticias
    prompt_system = OnceNoticiasPromptSystem(client)

    # Sistema de evaluaci√≥n de calidad
    quality_system = OnceNoticiasQualityAssurance()

    # Sistema de investigaci√≥n (APIs opcionales por ahora)
    research_system = OnceNoticiasResearchSystem({
        "news_api": st.secrets.get("NEWS_API_KEY", ""),
        "banxico_api": st.secrets.get("BANXICO_API_KEY", "")
    })

    return prompt_system, quality_system, research_system

# Inicializar sistemas
prompt_system, quality_system, research_system = initialize_once_noticias_systems()

"""
PASO 3: Mejorar la funci√≥n de generaci√≥n principal
Reemplazar la funci√≥n generate_content actual con:
"""

def generate_enhanced_content(user_prompt, sources_prompt, category, subcategory, text_type, selected_length="auto"):
    """
    Generaci√≥n mejorada con evaluaci√≥n de calidad Once Noticias y control de longitud
    """
    try:
        # Logging del intento de generaci√≥n
        st.info("üîÑ Generando contenido con est√°ndares Once Noticias...")

        with st.spinner("Investigando fuentes y datos relevantes..."):
            # Pre-investigaci√≥n opcional (si est√°n disponibles las APIs)
            research_data = research_system.quick_research(
                topic=user_prompt,
                category=category,
                subcategory=subcategory
            )

        with st.spinner("Creando contenido period√≠stico especializado..."):
            # Crear prompt mejorado espec√≠fico Once Noticias con control de longitud
            enhanced_prompt = prompt_system.create_enhanced_system_prompt(
                category=category,
                subcategory=subcategory,
                text_type=text_type,
                user_prompt=user_prompt,
                sources=sources_prompt,
                selected_length=selected_length  # Nueva funcionalidad
            )

            # Generar contenido inicial
            initial_content = call_openai_api(enhanced_prompt, user_prompt)

            if not initial_content:
                st.error("Error en la generaci√≥n de contenido.")
                return None

        with st.spinner("Evaluando calidad editorial..."):
            # Evaluaci√≥n de calidad espec√≠fica Once Noticias
            quality_evaluation = quality_system.evaluate_content_quality(
                content=initial_content,
                metadata={
                    'category': category,
                    'subcategory': subcategory,
                    'text_type': text_type,
                    'user_prompt': user_prompt,
                    'selected_length': selected_length  # Agregar para an√°lisis
                }
            )

            # Mostrar m√©tricas de calidad
            display_quality_metrics(quality_evaluation)

            # Verificar si cumple est√°ndares de publicaci√≥n
            if not quality_evaluation.get("publication_ready", False):
                st.warning("‚ö†Ô∏è Contenido requiere mejoras. Regenerando con ajustes...")

                # Crear prompt de mejora basado en evaluaci√≥n
                improvement_prompt = prompt_system.create_improvement_prompt(
                    initial_content,
                    quality_evaluation,
                    category,
                    text_type
                )

                # Regenerar con mejoras
                improved_content = call_openai_api(improvement_prompt, user_prompt)

                if improved_content:
                    # Re-evaluar contenido mejorado
                    final_evaluation = quality_system.evaluate_content_quality(
                        content=improved_content,
                        metadata={
                            'category': category,
                            'subcategory': subcategory,
                            'text_type': text_type,
                            'user_prompt': user_prompt,
                            'selected_length': selected_length
                        }
                    )

                    display_quality_metrics(final_evaluation, title="Evaluaci√≥n Final")

                    return {
                        'content': improved_content,
                        'quality_evaluation': final_evaluation,
                        'research_data': research_data,
                        'improvement_applied': True,
                        'selected_length': selected_length
                    }
                else:
                    st.warning("No se pudo mejorar el contenido. Presentando versi√≥n inicial.")
                    return {
                        'content': initial_content,
                        'quality_evaluation': quality_evaluation,
                        'research_data': research_data,
                        'improvement_applied': False,
                        'selected_length': selected_length
                    }
            else:
                st.success("‚úÖ Contenido cumple est√°ndares de publicaci√≥n Once Noticias")
                return {
                    'content': initial_content,
                    'quality_evaluation': quality_evaluation,
                    'research_data': research_data,
                    'improvement_applied': False,
                    'selected_length': selected_length
                }

    except Exception as e:
        st.error(f"Error en la generaci√≥n: {str(e)}")
        return None

"""
PASO 4: Funci√≥n para mostrar m√©tricas de calidad
Agregar nueva funci√≥n:
"""

def display_quality_metrics(evaluation, title="Evaluaci√≥n de Calidad"):
    """Muestra las m√©tricas de calidad de manera visual"""

    overall_score = evaluation.get("overall_score", 0)
    publication_ready = evaluation.get("publication_ready", False)

    st.subheader(title)

    # Score general
    col1, col2, col3 = st.columns(3)

    with col1:
        color = "green" if overall_score >= 85 else "orange" if overall_score >= 75 else "red"
        st.metric(
            label="Score General",
            value=f"{overall_score:.1f}/100",
            help="Evaluaci√≥n general seg√∫n est√°ndares Once Noticias"
        )
        st.markdown(f"<span style='color: {color}'>{'Excelente' if overall_score >= 85 else 'Bueno' if overall_score >= 75 else 'Necesita mejoras'}</span>", unsafe_allow_html=True)

    with col2:
        st.metric(
            label="Estilo Once Noticias",
            value=f"{evaluation.get('once_noticias_compliance', {}).get('overall_style_match', 0):.1f}/100",
            help="Adherencia al estilo editorial espec√≠fico de Once Noticias"
        )

    with col3:
        ready_text = "Listo ‚úÖ" if publication_ready else "Requiere mejoras ‚ö†Ô∏è"
        st.metric(
            label="Estado",
            value=ready_text,
            help="¬øEst√° listo para publicaci√≥n seg√∫n est√°ndares editoriales?"
        )

    # Scores detallados por criterio
    if evaluation.get("detailed_scores"):
        st.subheader("Evaluaci√≥n Detallada")

        criteria_names = {
            "precision_factual": "Precisi√≥n Factual",
            "calidad_periodistica": "Calidad Period√≠stica",
            "relevancia_audiencia": "Relevancia para Audiencia",
            "completitud_informativa": "Completitud Informativa",
            "identidad_editorial": "Identidad Editorial"
        }

        for criterion, data in evaluation["detailed_scores"].items():
            score = data.get("score", 0)
            col1, col2 = st.columns([1, 3])

            with col1:
                st.metric(criteria_names.get(criterion, criterion), f"{score:.1f}/100")

            with col2:
                # Mostrar fortalezas
                if data.get("strengths"):
                    st.success("‚úÖ " + " | ".join(data["strengths"][:2]))

                # Mostrar problemas
                if data.get("issues"):
                    st.warning("‚ö†Ô∏è " + " | ".join(data["issues"][:2]))

    # Recomendaciones espec√≠ficas
    if evaluation.get("recommendations"):
        st.subheader("Recomendaciones de Mejora")
        for rec in evaluation["recommendations"][:5]:  # Mostrar m√°ximo 5
            if "PRIORITY" in rec or "üî¥" in rec:
                st.error(rec)
            elif "‚ö†Ô∏è" in rec:
                st.warning(rec)
            elif "‚úÖ" in rec:
                st.success(rec)
            else:
                st.info(rec)

"""
PASO 5: Mejorar la interfaz principal con selecci√≥n de longitud
En la funci√≥n main(), reemplazar la generaci√≥n con:
"""

def enhanced_main_interface():
    """Interfaz principal mejorada con est√°ndares Once Noticias y control de longitud"""

    st.title("üéØ Once Noticias - Generador Inteligente")
    st.markdown("**Sistema optimizado con est√°ndares editoriales espec√≠ficos de Once Noticias**")

    # Informaci√≥n del sistema mejorado
    with st.expander("‚ÑπÔ∏è Mejoras Implementadas"):
        st.markdown("""
        **Nuevas caracter√≠sticas basadas en investigaci√≥n editorial:**

        - üéØ **Prompts especializados** por cada combinaci√≥n de categor√≠a y tipo de contenido
        - üìä **Evaluaci√≥n autom√°tica** seg√∫n est√°ndares espec√≠ficos de Once Noticias
        - üîÑ **Regeneraci√≥n inteligente** cuando el contenido no cumple criterios de calidad
        - üá≤üáΩ **Contexto mexicano** integrado y fuentes oficiales apropiadas
        - üìù **Patrones de atribuci√≥n** caracter√≠sticos del medio
        - üìè **Control de longitud** con opci√≥n "Auto" optimizada por tipo de contenido
        - ‚úÖ **Garant√≠a de calidad** antes de presentar contenido
        """)

    # Configuraci√≥n existente (mantener igual)
    col1, col2 = st.columns([1, 2])

    with col1:
        st.subheader("Configuraci√≥n")

        # Tipo de texto
        text_type = st.selectbox(
            "Tipo de contenido:",
            text_types,
            help="Cada tipo tiene patrones espec√≠ficos de Once Noticias"
        )

        # Categor√≠a principal
        selected_category = st.selectbox(
            "Categor√≠a principal:",
            main_categories,
            help="Determina fuentes, tono y enfoque espec√≠fico"
        )

        # Subcategor√≠a
        selected_subcategory = st.selectbox(
            "Subcategor√≠a:",
            subcategories,
            help="Especializaci√≥n adicional del contenido"
        )

        # NUEVA FUNCIONALIDAD: Selecci√≥n de longitud con opci√≥n Auto
        st.subheader("Longitud del Contenido")

        # Obtener opciones de longitud del sistema
        length_options = {
            "Auto (Optimizada para el tipo de contenido)": "auto",
            "Corta (100-300 palabras)": "corta",
            "Media (301-500 palabras)": "media",
            "Larga (501-800 palabras)": "larga",
            "Muy larga (801+ palabras)": "muy_larga"
        }

        selected_length_display = st.selectbox(
            "Longitud:",
            list(length_options.keys()),
            help="Selecciona 'Auto' para usar longitud optimizada seg√∫n el tipo de contenido Once Noticias"
        )

        selected_length = length_options[selected_length_display]

        # Mostrar informaci√≥n espec√≠fica cuando es Auto
        if selected_length == "auto":
            display_auto_length_info(text_type)

        # Mostrar info espec√≠fica de la combinaci√≥n seleccionada
        display_combination_info(text_type, selected_category)

    with col2:
        st.subheader("Contenido a generar")

        # Prompt del usuario
        user_prompt = st.text_area(
            "Tema o instrucciones:",
            placeholder="Ejemplo: Baja de la pobreza laboral seg√∫n datos del INEGI...",
            height=100,
            help="Describe el tema espec√≠fico que quieres cubrir"
        )

        # Fuentes y referencias
        sources_prompt = st.text_area(
            "Fuentes y referencias (opcional):",
            placeholder="URLs, nombres de fuentes, datos espec√≠ficos...",
            height=80,
            help="Informaci√≥n adicional para enriquecer el contenido"
        )

        # Bot√≥n de generaci√≥n mejorado
        if st.button("üöÄ Generar Contenido Once Noticias", type="primary"):
            if user_prompt.strip():
                # Usar funci√≥n de generaci√≥n mejorada con longitud
                result = generate_enhanced_content(
                    user_prompt=user_prompt,
                    sources_prompt=sources_prompt,
                    category=selected_category,
                    subcategory=selected_subcategory,
                    text_type=text_type,
                    selected_length=selected_length  # Nueva funcionalidad
                )

                if result:
                    # Mostrar contenido generado
                    st.subheader("üì∞ Contenido Generado")

                    # Mostrar informaci√≥n de longitud aplicada
                    display_length_applied_info(result['selected_length'], text_type)

                    st.write(result['content'])

                    # Opciones de exportaci√≥n (mantener existentes)
                    provide_download_options(result['content'], text_type)

                    # Guardar en Snowflake con evaluaci√≥n de calidad
                    save_to_snowflake_enhanced(
                        user_prompt,
                        sources_prompt,
                        result['content'],
                        selected_category,
                        selected_subcategory,
                        text_type,
                        result['quality_evaluation'],
                        result['selected_length']  # Nueva informaci√≥n
                    )

            else:
                st.warning("Por favor, describe el tema que quieres cubrir.")

"""
PASO 6: Funciones auxiliares para la nueva funcionalidad de longitud
"""

def display_auto_length_info(text_type):
    """Muestra informaci√≥n sobre la longitud autom√°tica seg√∫n el tipo de contenido"""

    auto_length_info = {
        "Nota Period√≠stica": {
            "descripcion": "Breve y concisa (1-2 minutos de lectura)",
            "caracteristicas": "2-3 p√°rrafos principales, informaci√≥n esencial",
            "objetivo": "Informaci√≥n r√°pida y directa seg√∫n pir√°mide invertida"
        },
        "Art√≠culo": {
            "descripcion": "Extenso y desarrollado (2-4 minutos de lectura)",
            "caracteristicas": "3-8 secciones tem√°ticas, desarrollo completo",
            "objetivo": "An√°lisis profundo con m√∫ltiples fuentes y contexto"
        },
        "Gui√≥n de TV": {
            "descripcion": "Muy conciso (30-90 segundos de lectura)",
            "caracteristicas": "Oraciones cortas, indicaciones t√©cnicas",
            "objetivo": "Formato optimizado para transmisi√≥n televisiva"
        },
        "Cr√≥nica": {
            "descripcion": "Variable seg√∫n narrativa (sin l√≠mite fijo)",
            "caracteristicas": "Desarrollo completo de historia",
            "objetivo": "Narrativa inmersiva desde escena inicial hasta reflexi√≥n"
        }
    }

    info = auto_length_info.get(text_type, {})

    if info:
        st.info(f"""
        **Longitud Autom√°tica para {text_type}:**

        üìè **Extensi√≥n:** {info['descripcion']}
        üìã **Caracter√≠sticas:** {info['caracteristicas']}
        üéØ **Objetivo:** {info['objetivo']}
        """)

def display_length_applied_info(selected_length, text_type):
    """Muestra informaci√≥n sobre la longitud que se aplic√≥ al contenido"""

    if selected_length == "auto":
        st.success(f"‚úÖ Longitud autom√°tica aplicada - Optimizada para {text_type} seg√∫n est√°ndares Once Noticias")
    else:
        length_names = {
            "corta": "Corta (100-300 palabras)",
            "media": "Media (301-500 palabras)",
            "larga": "Larga (501-800 palabras)",
            "muy_larga": "Muy larga (801+ palabras)"
        }
        st.info(f"üìè Longitud aplicada: {length_names.get(selected_length, selected_length)}")

def display_combination_info(text_type, category):
    """Muestra informaci√≥n espec√≠fica de la combinaci√≥n seleccionada"""

    # Informaci√≥n espec√≠fica de Once Noticias por combinaci√≥n
    info_matrix = {
        ("Nota Period√≠stica", "Econom√≠a"): {
            "estructura": "Pir√°mide invertida con cifras en lead",
            "fuentes": "INEGI, Banxico, SHCP",
            "elementos": "Datos + comparaci√≥n temporal + impacto"
        },
        ("Art√≠culo", "Pol√≠tica"): {
            "estructura": "Bloques tem√°ticos con m√∫ltiples fuentes",
            "fuentes": "Funcionarios oficiales, comunicados",
            "elementos": "Cargos completos + equilibrio + contexto"
        },
        ("Gui√≥n de TV", "Justicia"): {
            "estructura": "Oraciones cortas + indicaciones t√©cnicas",
            "fuentes": "FGR, autoridades policiales",
            "elementos": "Terminolog√≠a precisa + evidencias + situaci√≥n"
        },
        ("Cr√≥nica", "Sociedad"): {
            "estructura": "Narrativa inmersiva con personajes",
            "fuentes": "Ciudadanos, secretar√≠as sociales",
            "elementos": "Humanizaci√≥n + detalles sensoriales + impacto social"
        }
        # Agregar m√°s combinaciones seg√∫n matriz del plan
    }

    combo_info = info_matrix.get((text_type, category))

    if combo_info:
        st.info(f"""
        **Patr√≥n Once Noticias para {text_type} - {category}:**

        üìê **Estructura:** {combo_info['estructura']}
        üìã **Fuentes esperadas:** {combo_info['fuentes']}
        üéØ **Elementos clave:** {combo_info['elementos']}
        """)

"""
PASO 7: Mejorar funci√≥n de guardado en Snowflake con informaci√≥n de longitud
"""

def save_to_snowflake_enhanced(user_prompt, sources_prompt, content, category, subcategory, text_type, quality_evaluation, selected_length):
    """Guarda en Snowflake con m√©tricas de calidad incluidas y informaci√≥n de longitud"""

    try:
        conn = st.connection("snowflake")

        # Preparar datos extendidos
        data_to_save = {
            'timestamp': datetime.now(),
            'user_prompt': user_prompt,
            'sources_prompt': sources_prompt,
            'generated_content': content,
            'category': category,
            'subcategory': subcategory,
            'text_type': text_type,

            # Nueva informaci√≥n de longitud
            'selected_length': selected_length,
            'word_count': len(content.split()) if content else 0,

            # M√©tricas de calidad existentes
            'overall_quality_score': quality_evaluation.get("overall_score", 0),
            'publication_ready': quality_evaluation.get("publication_ready", False),
            'style_compliance_score': quality_evaluation.get('once_noticias_compliance', {}).get('overall_style_match', 0),

            # Scores detallados
            'precision_factual_score': quality_evaluation.get("detailed_scores", {}).get("precision_factual", {}).get("score", 0),
            'calidad_periodistica_score': quality_evaluation.get("detailed_scores", {}).get("calidad_periodistica", {}).get("score", 0),
            'relevancia_audiencia_score': quality_evaluation.get("detailed_scores", {}).get("relevancia_audiencia", {}).get("score", 0),
            'completitud_informativa_score': quality_evaluation.get("detailed_scores", {}).get("completitud_informativa", {}).get("score", 0),
            'identidad_editorial_score': quality_evaluation.get("detailed_scores", {}).get("identidad_editorial", {}).get("score", 0),

            # Metadatos adicionales
            'improvement_applied': quality_evaluation.get('improvement_applied', False),
            'recommendations_count': len(quality_evaluation.get("recommendations", [])),
            'critical_issues_count': len(quality_evaluation.get("critical_issues", []))
        }

        # Insertar con estructura extendida
        conn.execute("""
            INSERT INTO content_generation_log_enhanced
            (timestamp, user_prompt, sources_prompt, generated_content, category, subcategory, text_type,
             selected_length, word_count,
             overall_quality_score, publication_ready, style_compliance_score,
             precision_factual_score, calidad_periodistica_score, relevancia_audiencia_score,
             completitud_informativa_score, identidad_editorial_score,
             improvement_applied, recommendations_count, critical_issues_count)
            VALUES (%(timestamp)s, %(user_prompt)s, %(sources_prompt)s, %(generated_content)s,
                   %(category)s, %(subcategory)s, %(text_type)s,
                   %(selected_length)s, %(word_count)s,
                   %(overall_quality_score)s, %(publication_ready)s, %(style_compliance_score)s,
                   %(precision_factual_score)s, %(calidad_periodistica_score)s, %(relevancia_audiencia_score)s,
                   %(completitud_informativa_score)s, %(identidad_editorial_score)s,
                   %(improvement_applied)s, %(recommendations_count)s, %(critical_issues_count)s)
        """, data_to_save)

        st.success("‚úÖ Contenido y m√©tricas guardados correctamente")

    except Exception as e:
        st.error(f"Error al guardar: {str(e)}")

"""
PASOS ADICIONALES ACTUALIZADOS:

1. Crear tabla Snowflake extendida con campos de longitud:
```sql
CREATE TABLE content_generation_log_enhanced (
    timestamp TIMESTAMP,
    user_prompt TEXT,
    sources_prompt TEXT,
    generated_content TEXT,
    category VARCHAR(50),
    subcategory VARCHAR(50),
    text_type VARCHAR(50),
    selected_length VARCHAR(20),      -- NUEVO: auto, corta, media, larga, muy_larga
    word_count INTEGER,               -- NUEVO: conteo real de palabras
    overall_quality_score FLOAT,
    publication_ready BOOLEAN,
    style_compliance_score FLOAT,
    precision_factual_score FLOAT,
    calidad_periodistica_score FLOAT,
    relevancia_audiencia_score FLOAT,
    completitud_informativa_score FLOAT,
    identidad_editorial_score FLOAT,
    improvement_applied BOOLEAN,
    recommendations_count INTEGER,
    critical_issues_count INTEGER
);
```

2. Agregar secrets opcionales en Streamlit (sin cambios):
```toml
[secrets]
OPENAI_API_KEY = "tu_key_existente"
NEWS_API_KEY = "opcional_para_investigacion"
BANXICO_API_KEY = "opcional_para_datos_economicos"
```

3. Instalar dependencias adicionales (sin cambios):
```bash
pip install pandas numpy typing
```

CARACTER√çSTICAS NUEVAS DE LONGITUD:

‚úÖ **Opci√≥n "Auto":** Usa longitudes optimizadas espec√≠ficas por tipo de contenido Once Noticias
‚úÖ **Control de Usuario:** Permite selecci√≥n manual de longitud cuando se necesita
‚úÖ **Informaci√≥n Contextual:** Muestra qu√© significa cada opci√≥n de longitud
‚úÖ **Tracking de Palabras:** Cuenta y guarda palabras reales generadas
‚úÖ **Flexibilidad:** Mantiene estructura editorial sin importar la longitud seleccionada

RESULTADO ESPERADO:
- Sistema que respeta la selecci√≥n de longitud del usuario
- Opci√≥n "Auto" que optimiza longitud seg√∫n tipo de contenido y est√°ndares Once Noticias
- Interface clara que explica cada opci√≥n de longitud
- M√©tricas de calidad independientes de la longitud seleccionada
- Base de datos enriquecida con informaci√≥n de longitud para an√°lisis posterior
"""